name: SQLMesh Bot
run-name: ðŸš€SQLMesh Bot ðŸš€
on:
  pull_request:
    types:
    - synchronize
    - opened
  pull_request_review:
    types:
    - edited
    - submitted
    - dismissed
  # Required if using comments to issue commands to the bot
  issue_comment:
    types:
    - created
# The latest commit is the one that will be used to create the PR environment and deploy to production
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
jobs:
  sqlmesh:
    name: SQLMesh Actions Workflow
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]'
    permissions:
      # Required to access code in PR
      contents: write
      # Required to post comments
      issues: write
      # Required to update check runs
      checks: write
      # Required to merge
      pull-requests: write
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.pull_request && github.event.issue.number || github.event.pull_request.number  }}/merge

      - name: Install SQLMesh + Dependencies
        run: make setup
        shell: bash
      - name: Run CI/CD Bot
        id: run-bot
        run: |
          uv run sqlmesh_cicd -p ${{ github.workspace }}/src/features github --token ${{ secrets.GITHUB_TOKEN }} run-all
      
      # If you need to debug, uncomment this. You can then ssh into the github action VM with tmux
      # Then cntrl+C will give you write access
      # - name: Set up Tmate session
      #   uses: mxschmitt/action-tmate@v2
      
      # TODO: The github bot for some reason breaks the required checks.... kinda nuts
      # - name: commit db on success pr sync
      #   if: steps.run-bot.outputs.pr_environment_synced == 'success' && steps.run-bot.outputs.prod_environment_synced != 'success'
      #   run: |
      #       git fetch origin ${{ github.head_ref || github.ref_name }} 
      #       git checkout ${{ github.head_ref || github.ref_name }} 
      #       git pull
      #       uv run sqlmesh -p ${{ github.workspace }}/src/features plan real_mlops_${{ github.event.issue.pull_request && github.event.issue.number || github.event.pull_request.number  }}
      #       echo $(git status)
      #       echo "Committing and pushing changes..."
      #       git config --global user.name "GitHub Actions"
      #       git config --global user.email "actions@github.com"
      #       git add -f ${{ github.workspace }}/db.db
      #       git commit -m "Update virtual environment after CI PR sync" --allow-empty
      #       git push

      - name: commit db on success prod sysnc
        if: steps.run-bot.outputs.prod_environment_synced == 'success'
        run: |
          echo "Committing and pushing changes..."
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          uv run sqlmesh -p ${{ github.workspace }}/src/features plan
          git add -f ${{ github.workspace }}/db.db
          git commit -m "Update prod db after CI/CD run" --allow-empty
          git push --force origin HEAD:main